/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WishlistRouteImport } from './routes/wishlist'
import { Route as CheckoutRouteImport } from './routes/checkout'
import { Route as CartRouteImport } from './routes/cart'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrdersIndexRouteImport } from './routes/orders/index'
import { Route as ProfileSettingsRouteImport } from './routes/profile/settings'
import { Route as ProductProductIdRouteImport } from './routes/product/$productId'
import { Route as OrdersPendingRouteImport } from './routes/orders/pending'
import { Route as CheckoutSuccessRouteImport } from './routes/checkout/success'
import { Route as CategoryCategoryIdRouteImport } from './routes/category/$categoryId'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const WishlistRoute = WishlistRouteImport.update({
  id: '/wishlist',
  path: '/wishlist',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckoutRoute = CheckoutRouteImport.update({
  id: '/checkout',
  path: '/checkout',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersIndexRoute = OrdersIndexRouteImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileSettingsRoute = ProfileSettingsRouteImport.update({
  id: '/profile/settings',
  path: '/profile/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductProductIdRoute = ProductProductIdRouteImport.update({
  id: '/product/$productId',
  path: '/product/$productId',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersPendingRoute = OrdersPendingRouteImport.update({
  id: '/orders/pending',
  path: '/orders/pending',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckoutSuccessRoute = CheckoutSuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => CheckoutRoute,
} as any)
const CategoryCategoryIdRoute = CategoryCategoryIdRouteImport.update({
  id: '/category/$categoryId',
  path: '/category/$categoryId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/checkout': typeof CheckoutRouteWithChildren
  '/wishlist': typeof WishlistRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/category/$categoryId': typeof CategoryCategoryIdRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/orders/pending': typeof OrdersPendingRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/profile/settings': typeof ProfileSettingsRoute
  '/orders': typeof OrdersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/checkout': typeof CheckoutRouteWithChildren
  '/wishlist': typeof WishlistRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/category/$categoryId': typeof CategoryCategoryIdRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/orders/pending': typeof OrdersPendingRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/profile/settings': typeof ProfileSettingsRoute
  '/orders': typeof OrdersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/checkout': typeof CheckoutRouteWithChildren
  '/wishlist': typeof WishlistRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/category/$categoryId': typeof CategoryCategoryIdRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/orders/pending': typeof OrdersPendingRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/profile/settings': typeof ProfileSettingsRoute
  '/orders/': typeof OrdersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cart'
    | '/checkout'
    | '/wishlist'
    | '/auth/login'
    | '/auth/register'
    | '/category/$categoryId'
    | '/checkout/success'
    | '/orders/pending'
    | '/product/$productId'
    | '/profile/settings'
    | '/orders'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cart'
    | '/checkout'
    | '/wishlist'
    | '/auth/login'
    | '/auth/register'
    | '/category/$categoryId'
    | '/checkout/success'
    | '/orders/pending'
    | '/product/$productId'
    | '/profile/settings'
    | '/orders'
  id:
    | '__root__'
    | '/'
    | '/cart'
    | '/checkout'
    | '/wishlist'
    | '/auth/login'
    | '/auth/register'
    | '/category/$categoryId'
    | '/checkout/success'
    | '/orders/pending'
    | '/product/$productId'
    | '/profile/settings'
    | '/orders/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CartRoute: typeof CartRoute
  CheckoutRoute: typeof CheckoutRouteWithChildren
  WishlistRoute: typeof WishlistRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  CategoryCategoryIdRoute: typeof CategoryCategoryIdRoute
  OrdersPendingRoute: typeof OrdersPendingRoute
  ProductProductIdRoute: typeof ProductProductIdRoute
  ProfileSettingsRoute: typeof ProfileSettingsRoute
  OrdersIndexRoute: typeof OrdersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/wishlist': {
      id: '/wishlist'
      path: '/wishlist'
      fullPath: '/wishlist'
      preLoaderRoute: typeof WishlistRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checkout': {
      id: '/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof CheckoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/': {
      id: '/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/settings': {
      id: '/profile/settings'
      path: '/profile/settings'
      fullPath: '/profile/settings'
      preLoaderRoute: typeof ProfileSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/$productId': {
      id: '/product/$productId'
      path: '/product/$productId'
      fullPath: '/product/$productId'
      preLoaderRoute: typeof ProductProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/pending': {
      id: '/orders/pending'
      path: '/orders/pending'
      fullPath: '/orders/pending'
      preLoaderRoute: typeof OrdersPendingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checkout/success': {
      id: '/checkout/success'
      path: '/success'
      fullPath: '/checkout/success'
      preLoaderRoute: typeof CheckoutSuccessRouteImport
      parentRoute: typeof CheckoutRoute
    }
    '/category/$categoryId': {
      id: '/category/$categoryId'
      path: '/category/$categoryId'
      fullPath: '/category/$categoryId'
      preLoaderRoute: typeof CategoryCategoryIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface CheckoutRouteChildren {
  CheckoutSuccessRoute: typeof CheckoutSuccessRoute
}

const CheckoutRouteChildren: CheckoutRouteChildren = {
  CheckoutSuccessRoute: CheckoutSuccessRoute,
}

const CheckoutRouteWithChildren = CheckoutRoute._addFileChildren(
  CheckoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CartRoute: CartRoute,
  CheckoutRoute: CheckoutRouteWithChildren,
  WishlistRoute: WishlistRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  CategoryCategoryIdRoute: CategoryCategoryIdRoute,
  OrdersPendingRoute: OrdersPendingRoute,
  ProductProductIdRoute: ProductProductIdRoute,
  ProfileSettingsRoute: ProfileSettingsRoute,
  OrdersIndexRoute: OrdersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
